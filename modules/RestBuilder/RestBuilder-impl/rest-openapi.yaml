
components:
  schemas:
    Stock:
      description: Stock
      properties:
        id:
          description: The category name.
          type: integer
        quantity:
          description: The tax category.
          type: integer
        productName:
          description: name of the product
          type: string
        type:
          description: type of the product
          allOf:
            - $ref: "#/components/schemas/Type"
        category:
          allOf:
            - $ref: "#/components/schemas/Category"
        price:
          description: the price of the product.
          type: number
      type: object
    Category:
      description: Category
      properties:
        name:
          description: The category name.
          type: string
        id:
          description: The category ID.
          type: integer
        tax:
          description: The tax category.
          format: double
          type: number
      type: object
    CategoryInput:
      description: Category
      properties:
        name:
          description: The category name.
          type: string
        tax:
          description: The tax category.
          format: double
          type: number
      type: object
    Type:
      description: Type
      properties:
        name:
          description: The type name.
          type: string
        id:
          description: The type ID.
          type: integer
        tax:
          description: the type tax.
          format: double
          type: number
      type: object
    TypeInput:
      description: Type
      properties:
        name:
          description: The type name.
          type: string
        tax:
          description: the type tax.
          format: double
          type: number
      type: object
    ProductInput:
      description: Product
      properties:
        name:
          description: The entity name.
          type: string
        categoryId:
          description: The category ID.
          type: integer
        typeId:
          description: The type ID.
          type: integer
        price:
          description: The price product.
          format: double
          type: number
        quantity:
          description: number products that will be create
          type: integer
      type: object
    Product:
      description: Product
      properties:
        name:
          description: The entity name.
          type: string
        id:
          description: The entity ID.
          type: integer
        category:
          allOf:
            - $ref: "#/components/schemas/Category"
        type:
          allOf:
            - $ref: "#/components/schemas/Type"
        price:
          description: The price product.
          format: double
          type: number
      type: object
    Cart:
      description: Cart
      properties:
        id:
          description: The Cart ID.
          type: integer
        able:
          description: Show if the cart is able or not
          type: boolean
        totalValue:
          description: total payment amount.
          format: double
          type: number
        productList:
          type: array
          items:
            type: object
            description: array de produtos
            properties:
              name:
                description: The entity name.
                type: string
              id:
                description: The entity ID.
                type: integer
              category:
                allOf:
                  - $ref: "#/components/schemas/Category"
              type:
                allOf:
                  - $ref: "#/components/schemas/Type"
              price:
                description: The price product.
                format: double
                type: number
      type: object

info:
  description: ""
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
  title: "Sale Taxe API"
  version: v1.0
openapi: 3.0.1
paths:
  "/product/all":
    get:
      operationId: getAllProducts
      responses:
        200:
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/Product"
                type: array
            application/xml:
              schema:
                $ref: "#/components/schemas/Product"
          description: ""
      tags: ["Product"]

  "/product/{productId}":
    get:
      operationId: getProductById
      parameters:
        - in: path
          name: productId
          required: true
          schema:
            type: integer
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
            application/xml:
              schema:
                $ref: "#/components/schemas/Product"
          description: ""
      tags: ["Product"]
  "/product/create":
    post:
      operationId: createProduct
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProductInput"
          application/xml:
            schema:
              $ref: "#/components/schemas/ProductInput"
      responses:
        200:
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/Product"
                type: array
            application/xml:
              schema:
                items:
                  $ref: "#/components/schemas/Product"
                type: array
          description: ""
      tags: ["Product"]
  "/product/update/{productId}":
    put:
      operationId: updateProductById
      parameters:
        - in: path
          name: productId
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProductInput"
          application/xml:
            schema:
              $ref: "#/components/schemas/ProductInput"
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
            application/xml:
              schema:
                $ref: "#/components/schemas/Product"
          description: ""
      tags: ["Product"]

  "/product/delete/{productId}":
    delete:
      operationId: deleteProductById
      parameters:
        - in: path
          name: productId
          required: true
          schema:
            type: integer
      responses:
        204:
          content:
            application/json: {}
            application/xml: {}
          description: ""
      tags: ["Product"]
  "/stock/all":
    get:
      operationId: getAllStock
      responses:
        200:
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/Stock"
                type: array
            application/xml:
              schema:
                $ref: "#/components/schemas/Stock"
          description: ""
      tags: ["Stock"]
  "/stock/getAllProductsBySotckId/{stockId}":
    get:
      operationId: getAllProductsBySotckId
      parameters:
        - in: path
          name: stockId
          required: true
          schema:
            type: integer
      responses:
        200:
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/Product"
                type: array
            application/xml:
              schema:
                items:
                  $ref: "#/components/schemas/Product"
                type: array
          description: ""
      tags: ["Stock"]
  "/category/all":
    get:
      operationId: getAllCategories
      responses:
        200:
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/Category"
                type: array
            application/xml:
              schema:
                $ref: "#/components/schemas/Category"
          description: ""
      tags: ["Category"]


  "/category/{categoryName}":
    get:
      operationId: getCategoryByName
      parameters:
        - in: path
          name: categoryName
          required: true
          schema:
            type: string
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Category"
            application/xml:
              schema:
                $ref: "#/components/schemas/Category"
          description: ""
      tags: ["Category"]

  "/category/{categoryId}":
    get:
      operationId: getCategoryById
      parameters:
        - in: path
          name: categoryId
          required: true
          schema:
            type: integer
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Category"
            application/xml:
              schema:
                $ref: "#/components/schemas/Category"
          description: ""
      tags: [ "Category" ]

  "/category/create":
    post:
      operationId: createCategory
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CategoryInput"
          application/xml:
            schema:
              $ref: "#/components/schemas/CategoryInput"
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Category"
            application/xml:
              schema:
                $ref: "#/components/schemas/Category"
          description: ""
      tags: ["Category"]
  "/category/update/{categoryId}":
    put:
      operationId: updateCategoryById
      parameters:
        - in: path
          name: categoryId
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CategoryInput"
          application/xml:
            schema:
              $ref: "#/components/schemas/CategoryInput"
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Category"
            application/xml:
              schema:
                $ref: "#/components/schemas/Category"
          description: ""
      tags: ["Category"]

  "/category/delete/{categoryId}":
    delete:
      operationId: deleteCategoryById
      parameters:
        - in: path
          name: categoryId
          required: true
          schema:
            type: integer
      responses:
        204:
          content:
            application/json: {}
            application/xml: {}
          description: ""
      tags: ["Category"]

  "/type/all":
    get:
      operationId: getAllTypes
      responses:
        200:
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/Type"
                type: array
            application/xml:
              schema:
                $ref: "#/components/schemas/Type"
          description: ""
      tags: ["Type"]


  "/type/{typeId}":
    get:
      operationId: getTypeById
      parameters:
        - in: path
          name: typeId
          required: true
          schema:
            type: integer
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Type"
            application/xml:
              schema:
                $ref: "#/components/schemas/Type"
          description: ""
      tags: ["Type"]

  "/type/create":
    post:
      operationId: createType
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TypeInput"
          application/xml:
            schema:
              $ref: "#/components/schemas/TypeInput"
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Type"
            application/xml:
              schema:
                $ref: "#/components/schemas/Type"
          description: ""
      tags: ["Type"]
  "/type/update/{typeId}":
    put:
      operationId: updateTypeById
      parameters:
        - in: path
          name: typeId
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TypeInput"
          application/xml:
            schema:
              $ref: "#/components/schemas/TypeInput"
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Type"
            application/xml:
              schema:
                $ref: "#/components/schemas/Type"
          description: ""
      tags: ["Type"]

  "/type/delete/{typeId}":
    delete:
      operationId: deleteTypeById
      parameters:
        - in: path
          name: typeId
          required: true
          schema:
            type: integer
      responses:
        204:
          content:
            application/json: {}
            application/xml: {}
          description: ""
      tags: ["Type"]
  "/cart/getAll":
    get:
      operationId: getAllCarts
      responses:
        200:
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Cart"
            application/xml:
              schema:
                $ref: "#/components/schemas/Cart"
          description: ""
      tags: ["Cart"]

  "/cart/{cartId}":
    get:
      operationId: getCartById
      parameters:
        - in: path
          name: cartId
          required: true
          schema:
            type: integer
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Cart"
            application/xml:
              schema:
                $ref: "#/components/schemas/Cart"
          description: ""
      tags: ["Cart"]

  "/cart/getTotalValue/{cartId}":
    get:
      operationId: getTotalValueByCartId
      parameters:
        - in: path
          name: cartId
          required: true
          schema:
            type: integer
      responses:
        200:
          content:
            application/json:
              schema:
                type: integer
            application/xml:
              schema:
                type: integer
          description: ""
      tags: ["Cart"]

  "/cart/create":
    get:
      operationId: createCart
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Cart"
            application/xml:
              schema:
                $ref: "#/components/schemas/Cart"
          description: ""
      tags: ["Cart"]

  "/finishBuy/CartId/{cartID}":
    patch:
      operationId: finishBuy
      parameters:
        - in: path
          name: cartID
          required: true
          schema:
            type: integer
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Cart"
            application/xml:
              schema:
                $ref: "#/components/schemas/Cart"
          description: ""
      tags: ["Cart"]

  "/addProductoCart/{cartID}/sotckId/{stockId}/quantity/{quantity}":
    patch:
      operationId: addProductToCart
      parameters:
        - in: path
          name: cartID
          required: true
          schema:
            type: integer
        - in: path
          name: stockId
          required: true
          description: A comma-separated list of user IDs.
          schema:
            type: integer
        - in: path
          name: quantity
          required: true
          description: A comma-separated list of user IDs.
          schema:
            type: integer
      responses:
        200:
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Product"
            application/xml:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Product"
          description: ""
      tags: ["Cart"]

  "/removeProductFromCart/{cartID}/productId/{productId}":
    patch:
      operationId: removeProductFromCart
      parameters:
        - in: path
          name: cartID
          required: true
          schema:
            type: integer
        - in: path
          name: productId
          required: true
          description: A comma-separated list of user IDs.
          schema:
            type: integer
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Cart"
            application/xml:
              schema:
                $ref: "#/components/schemas/Cart"
          description: ""
      tags: ["Cart"]

  "/cart/delete/{cartId}":
    delete:
      operationId: deleteCartById
      parameters:
        - in: path
          name: cartId
          required: true
          schema:
            type: integer
      responses:
        204:
          content:
            application/json: {}
            application/xml: {}
          description: ""
      tags: ["Cart"]